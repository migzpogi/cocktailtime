stages:
  - stage: prepare_deployment
    displayName: "Prepare deployment"
    jobs:
      - job: deploy_job
        displayName: "Deploy"
        variables:
          project_root_folder: $(Build.SourcesDirectory)
          ansible_root_folder: $(project_root_folder)/ansible
          ansible_inventory_file: $(ansible_root_folder)/inv
          ansible_playbook_file: $(ansible_root_folder)/playbooks/remote_playbook.yml
          artifacts_to_be_deployed: $(Build.ArtifactStagingDirectory)/artifact.tar.gz
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              sudo apt-get install tree
            displayName: "Install tree"

          - script: |
              tree $(Build.SourcesDirectory)
            displayName: "List tree Build.SourcesDirectory"

          - task: AzureKeyVault@1
            displayName: "Connect to Azure Keyvault"
            inputs:
              azureSubscription: 'MambaDevSVC'
              KeyVaultName: 'MambaDevKV'
              SecretsFilter: '*'
              RunAsPreJob: true

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens'
            inputs:
              targetFiles: |
                $(ansible_inventory_file)

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: $(project_root_folder)
              archiveType: 'tar'
              tarCompression: 'gz''
              archiveFile: $(artifacts_to_be_deployed)

          - task: Ansible@0
            displayName: "Run Ansible"
            inputs:
              ansibleInterface: "agentMachine"
              inventoriesAgentMachine: "file"
              playbookPathOnAgentMachine: $(ansible_playbook_file)
              inventoryFileOnAgentMachine: $(ansible_inventory_file)
              args: "-e '{ \"artifacts_to_be_deployed\": \"$(artifacts_to_be_deployed)\" }'"

  - stage: build
    displayName: "Build wheel file"
    dependsOn:
      - prepare_deployment
    condition: succeeded()
    jobs:
      - job: build_wheel
        displayName: "Build wheel file"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
            displayName: "Use Python 3.x"